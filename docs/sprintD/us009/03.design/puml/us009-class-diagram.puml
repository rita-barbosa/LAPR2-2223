@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize 0

'left to right direction

class AuthenticationRepository
{
    + getCurrentUserSession()
}

class UserSession
{
    + getUserId()
}

class Visit {
    - Integer id
    - String userName
    - String userPhoneNumber
    - Integer startHour
    - Integer endHour
    - LocalDate visitDate
    - Boolean acceptanceStatus
    + Visit(visitDay, visitMonth, visitYear, startHour, endHour,\n userName, userPhoneNumber)
    + getVisitDate()
    + getStartHour()
    + getEndHour()
    + sendNotification(agentEmail)
}

class AgencyRepository {
    + getAllNonDealAnnouncements()
    + getAgencyByAnnouncementId(announcementId)
}

class BusinessTypeRepository {
    + getBusinessTypeDesignationsList()
}

class PropertyTypeRepository {
    + getPropertyTypeDesignationsList()
}

class Agency {
    - Integer id
    - String designation
    - String emailAddress
    - Integer phoneNumber
    + getNonDealAnnouncements()
    + getAnnouncementById(announcementId)
    + anyAnnouncementHasId(announcementId)
}

class Repositories {
    - Repositories()
    + getInstance() : Repositories
    + getPersonRepository()
    + getAgencyRepository()
    + getAuthenticationRepository()
    + getCriteriaRepository()
    + getBusinessTypeRepository()
    + getPropertyTypeRepository()
}

class ScheduleVisitController {
    + ScheduleVisitController(agencyRepository, personRepository,\n criteriaRepository, authenticationRepository,\n businessTypeRepository, propertyTypeRepository)
    + getAllNonDealAnnouncementsDto()
    + getAllNonDealAnnouncements()
    + getCriteriaList()
    + getBusinessTypeList()
    + getPropertyTypeList()
    + toDto(nonDealsList)
    + getDesignationFromDto(businessTypeDto)
    + getAnnouncementsByBusinessType(businessTypeDto, nonDealsList)
    + getAnnouncementsByPropertyType(propertyTypeDto, nonDealsList)
    + getAnnouncementsByNumberBedrooms(numberBedrooms, nonDealsList)
    + getAnnouncementsByPrice(sortingOrder, nonDealsList)
    + getAnnouncementsByCity(sortingOrder, nonDealsList)
    + getAnnouncementsByState(sortingOrder, nonDealsList)
    + toModel(announcementDto)
    + scheduleVisit(announcement, visitDay, visitMonth, visitYear,\n startHour, endHour)
    + getUserPerson()
}

note right of ScheduleVisitController::getDesignationFromDto
This method call be also
used with propertyTypeDto
end note

note top of ScheduleVisitController
    - announcementDto is retrieved
      from selected data
    - announcement is retrieved from
      convertion of announcementDto
      to Model
    - visit is retrieved from announcement
    - visitDay, visitMonth, visitYear, startHour,
     endHour are retrieved from Visit
    - nonDealsList is the list of properties
      to display
end note



class ScheduleVisitUI {
}

class Announcement {
    - LocalDate acceptanceDate
    - LocalDate saleDate
    - Double saleAmount
    - Integer id
    - List<Visit> visitList
    + getId()
    + isDeal()
    + hasId(announcementId)
    + getAnnouncementInfoToDisplay()
    + createVisit(visitDay, visitMonth, visitYear, startHour,\n endHour, userName, userPhoneNumber)
    + addVisit(visit)
    - validateVisit(visit)
    + getAgentEmail()
}

class AnnouncementMapper {
    + toDto(nonDealsList)
    + getAnnouncementIdFromDto(announcementDto)
}

class CriteriaMapper {
    + toDto(criteriaList)
    + toDto(criterion)
    + getDesignation(obj)
    + create(businessTypeDesignation)
    + create(criterion)
}

note right of CriteriaMapper::create
This method it is also used
with propertyTypeDesignation
end note

class CriteriaDto{
    + getDesignation()
}

class AnnouncementList {
    - List<Announcement> announcements
    + getNonDeals()
    + getAnnouncementById(announcementId)
    + anyAnnouncementHasId(announcementId)
    + announcementHasBusinessType(nonDealsList, businessType)
    + announcementHasPropertyType(nonDealsList, propertyType)
    + announcementHasNumberBedrooms(nonDealsList, numberBedrooms)
    + sortAnnouncementsByAscendingPrice(nonDealsList)
    + sortAnnouncementsByDescendingPrice(nonDealsList)
    + sortAnnouncementsByAscendingCity(nonDealsList)
    + sortAnnouncementsByDescendingCity(nonDealsList)
    + sortAnnouncementsByAscendingState(nonDealsList)
    + sortAnnouncementsByDescendingState(nonDealsList)
    + sortAnnouncementsByMostRecentAcceptanceDate(nonDealsList)
}

note right of AnnouncementList::getAnnouncementByIdx
The variable idx refers to the
position of the announcement
in the Announcement List
end note

class AnnouncementDto{
    + create(announcementId, requestInfo)
    + getAnnouncementId()
}

note bottom of AnnouncementDto
    - requestInfo is String
     from the Announcement
     Request's toString()
end note

class Request{
    - LocalDate requestDate
    - Integer id
    - Email ownerEmail
    + toString()
}


class Property {
    - Double area
    - Double distanceCityCenter
    - List<Photograph> photograph
    + getLocation()
    + toString()
    }

class Employee{
    - String agencyId
    + getEmailAddress()
}

class Person{
    - String name;
    - String taxNumber;
    - Email emailAddress;
    - String phoneNumber;
    - String passportCardNumber;
    - List<String> roles;
    + getName()
    + getPhoneNumber()
    + getEmailAddress()
    + hasEmail(userEmail)
}

class PersonRepository {
    + getPersonByEmail(userEmail)
}

class CriteriaRepository {
    + getCriteriaList()
}

note bottom of PersonRepository
    - userEmail is retrieved
    from user session
end note

Interface Notification as "<b><<Interface>></b>\nNotification" {
    + sendNotification(email)
}

'RELATIONS


ScheduleVisitUI .> ScheduleVisitController

Repositories -> Repositories : instance

AuthenticationRepository --> "1" UserSession

ScheduleVisitController ..> AuthenticationRepository

ScheduleVisitController ..> Repositories

Repositories "1" --> "1" PersonRepository

Repositories "1" --> "1" AgencyRepository

Repositories "1" --> "1" AuthenticationRepository

ScheduleVisitController ..> PersonRepository

Repositories "1" --> "1" CriteriaRepository

ScheduleVisitController ..> CriteriaRepository

Repositories "1" --> "1" BusinessTypeRepository

ScheduleVisitController ..> BusinessTypeRepository

Repositories "1" --> "1" PropertyTypeRepository

ScheduleVisitController ..> PropertyTypeRepository

ScheduleVisitController ..> AgencyRepository

ScheduleVisitController ..> Agency

AgencyRepository "1" --> "*" Agency : aggregates >

PersonRepository "1" --> "*" Person : aggregates >

ScheduleVisitController ..> Person

ScheduleVisitController ..> Visit

ScheduleVisitController .> Announcement

ScheduleVisitController ..> AnnouncementMapper

ScheduleVisitController .> CriteriaMapper

CriteriaMapper ..> CriteriaDto

AnnouncementMapper ..> Announcement

AnnouncementMapper ..> AnnouncementDto

ScheduleVisitController .> AnnouncementDto

ScheduleVisitUI .> AnnouncementDto


Person "1" -up-> "1" Employee: represented in <
Employee "1" --> "*" Announcement: is published by <
Employee "1" -> "*" Visit: schedules >
Person "1" --> "*" Visit:  requests >
Visit "1" -right-> "1" Property: done to >
Announcement "1" -down-> "*" Visit : records >
Employee "1" -> "1" Agency: works in  >
Agency "1" --> "1" AnnouncementList : owns >
AnnouncementList "1" --> "*" Announcement: records >
Property "1" -left-> "1" Request : < has information about
Announcement "1" -left-> "1" Request : is  based on >
Agency "1" --> "*" Request : is assigned to >
Visit .up|> Notification : implements >

@enduml