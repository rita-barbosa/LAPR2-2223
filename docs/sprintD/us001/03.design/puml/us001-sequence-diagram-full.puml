@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "Unregistered User" as User
participant ":DisplayPropertiesUI" as UI
participant ":DisplayPropertiesController" as CTRL
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
participant "criteriaRepository\n:CriteriaRepository" as CRITERIAREP
participant "agencyRepository\n: AgencyRepository" as AGENCYREP
participant "agency\n: Agency" as AGENCY
participant "announcementList\n: AnnouncementList" as LISTCLASS
participant "listAnnouncements\n: List<Announcement>" as AnnounceList


activate User

    User -> UI : asks to display listed properties
    activate UI

    UI -> CTRL** : create

    UI -> CTRL : getAnnouncements()
    activate CTRL

         CTRL -> RepositorySingleton : getInstance()
         activate RepositorySingleton

         RepositorySingleton --> CTRL: repositories
         deactivate RepositorySingleton

         CTRL -> PLAT : getAgencyRepository()
         activate PLAT

         PLAT --> CTRL : agencyRepository
         deactivate PLAT

'         CTRL -> AGENCYREP : getAgenciesList()
'         activate AGENCYREP
'
'         AGENCYREP --> CTRL : agencieslist
'         deactivate AGENCYREP


'         loop for each agency
'         CTRL -> CTRL : getAnnouncementList()
'         activate CTRL
'
'         CTRL -> AGENCY : getAnnouncementList()
'         activate AGENCY
'
'         AGENCY --> CTRL : announcementList
'         deactivate AGENCY
'
'         CTRL --> CTRL : add(announcementList)
'         deactivate CTRL
'         |||
'         end

         CTRL -> AGENCYREP : getAllAnnouncementsList()
                 activate AGENCYREP

                 AGENCYREP -> AnnounceList** : announcementList = create()

                loop for all agencies

                     AGENCYREP -> AGENCY : getAnnouncementList()
                     activate AGENCY

                     AGENCY -> LISTCLASS : getAnnouncementList()
                     activate LISTCLASS

                         LISTCLASS --> AGENCY : announcementList
                     deactivate LISTCLASS

                         AGENCY --> AGENCYREP : announcementList
                     deactivate AGENCY
                     AGENCYREP -> AnnounceList : addAll(announcementList)
                     activate AnnounceList
                     deactivate AnnounceList
         |||
                end loop

                     AGENCYREP -> LISTCLASS : sortAnnouncementsByMostRecentAcceptanceDate(announcementList)
                     activate LISTCLASS

                         LISTCLASS --> AGENCYREP : announcementList
                     deactivate LISTCLASS
         |||


                     AGENCYREP --> CTRL : announcementList
                 deactivate AGENCYREP

'         CTRL -> LISTCLASS : getAnnouncementsByMostRecentAdded(announcementList)
'         activate LISTCLASS
'
'         LISTCLASS -> LISTCLASS : sortByMostRecentAdded(announcementList)
'         activate LISTCLASS

'         LISTCLASS --> LISTCLASS : announcementList
'         deactivate LISTCLASS
'
'         LISTCLASS --> CTRL : announcementList
'         deactivate LISTCLASS

'         CTRL -> CTRL : sortByMostRecentAdded(announcementList)
'         activate CTRL
'         deactivate CTRL
'
'         CTRL -> CTRL : announcementList
'         activate CTRL
'         deactivate CTRL

         CTRL --> UI : announcementList
         deactivate CTRL

         UI -> CTRL : getCriteriaList()
         activate CTRL

             'CTRL -> FILTERS : getFilters()
             'activate FILTERS

             CTRL -> RepositorySingleton : getInstance()
             activate RepositorySingleton

             RepositorySingleton --> CTRL: repositories
             deactivate RepositorySingleton

             CTRL -> PLAT : getCriteriaRepository()
             activate PLAT

             PLAT --> CTRL: criteriaRepository
             deactivate PLAT

             CTRL -> CRITERIAREP : getCriteriaList()
             activate CRITERIAREP

             CRITERIAREP --> CTRL : criteriaList
             deactivate CRITERIAREP

         CTRL --> UI : criteriaList
         deactivate CTRL

    UI --> User : display listed properties by most recent added and shows criteria
    deactivate UI


    opt type of business

        User -> UI : asks to select type of business
        activate UI

        UI --> User : shows types of business and request data
        deactivate UI

        User -> UI : selects data (businessType)
        activate UI

        UI -> CTRL :  getAnnouncementsByBusinessType(announcementsList, businessType)
        activate CTRL

        CTRL -> AnnounceList : getAnnouncementsByBusinessType(announcementList, businessType)
        activate AnnounceList

        loop for each announcement

            AnnounceList -> AnnounceList : announcementHasBusinessType(announcementList,\n businessType)
            activate AnnounceList

            AnnounceList --> AnnounceList: true/false
            deactivate AnnounceList

            alt false
            AnnounceList -> AnnounceList : removeAnnouncement(announcementList)
            activate AnnounceList

            AnnounceList --> AnnounceList: announcementList
            deactivate AnnounceList
            |||
           end
        |||
        end

        AnnounceList --> CTRL : announcementList
        deactivate AnnounceList

        CTRL --> UI : announcementList
        deactivate CTRL

        UI --> User : display all the listed properties, according to the \ncriteria chosen
        deactivate UI
            |||
    end

    opt type of property
        User -> UI : asks to select type of property
        activate UI

        UI --> User : shows types of properties and request data
        deactivate UI

        User -> UI : selects data (propertyType)
        activate UI

    UI -> CTRL :  getAnnouncementsByPropertyType(announcementsList, propertyType)
    activate CTRL


    CTRL -> AnnounceList : getAnnouncementsByPropertyType(announcementList, propertyType)
    activate AnnounceList

    loop for each announcement
        AnnounceList -> AnnounceList : announcementHasPropertyType(announcementList, \npropertyType)
        activate AnnounceList

        AnnounceList --> AnnounceList: true/false
        deactivate AnnounceList

        alt false
            AnnounceList -> AnnounceList : removeAnnouncement(announcementList)
            activate AnnounceList

            AnnounceList --> AnnounceList: announcementList
            deactivate AnnounceList
        |||
        end
        |||
    end

        AnnounceList --> CTRL : announcementList
        deactivate AnnounceList


        CTRL --> UI : announcementList
        deactivate CTRL

        UI --> User : display all the listed properties, according to the \ncriteria chosen
        deactivate UI
        |||
    end

    opt number of bedrooms & properType != land
        User -> UI : asks to select number of bedrooms
        activate UI

        UI --> User : shows options for number of bedrooms and request data
        deactivate UI

        User -> UI : selects data (numberBedrooms)
        activate UI

        UI -> CTRL :  getAnnouncementsByNumberBedrooms(announcementsList, numberBedrooms)
        activate CTRL

        CTRL -> AnnounceList : getAnnouncementsByNumberBedrooms(announcementList,\n numberBedrooms)
        activate AnnounceList

        loop for each announcement
            AnnounceList -> AnnounceList : announcementHasNumberBedrooms(announcementList,\n numberBedrooms)
            activate AnnounceList

            AnnounceList --> AnnounceList: true/false
            deactivate AnnounceList

            alt false
            AnnounceList -> AnnounceList : removeAnnouncement(announcementList)
            activate AnnounceList

            AnnounceList --> AnnounceList: announcementList
            deactivate AnnounceList
        |||
        end
    |||
    end

    AnnounceList --> CTRL : announcementList
    deactivate AnnounceList

    CTRL --> UI : announcementList
    deactivate CTRL

    UI --> User : display all the listed properties, according to the \ncriteria chosen
    deactivate UI
    |||
    end


    opt price
        User -> UI : asks to sort announcements by price
        activate UI

        UI --> User : shows options for sort announcements by price and request data
        deactivate UI

        User -> UI : select data (sortingType)
        activate UI

        UI -> CTRL : getAnnouncementsByPrice(sortingType, announcementList)
        activate CTRL

        CTRL -> AnnounceList : getAnnouncementsByPrice(sortingType, announcementList)
        activate AnnounceList


        alt ascending price

            AnnounceList -> AnnounceList : sortAnnouncementsByAscendingPrice(announcementList)
            activate AnnounceList

            AnnounceList --> AnnounceList : announcementList
            deactivate AnnounceList

            else descending price

            AnnounceList -> AnnounceList : sortAnnouncementsByDescendingPrice(announcementList)
            activate AnnounceList

            AnnounceList --> AnnounceList : announcementList
            deactivate AnnounceList

            |||
        end


        AnnounceList --> CTRL : announcementList
        deactivate AnnounceList

        CTRL --> UI : announcementList
        deactivate CTRL

        UI --> User : display all the listed properties, according to the \ncriteria chosen
        deactivate UI
    |||
    end

    opt city
        User -> UI : asks to sort announcements by city
        activate UI

        UI --> User : shows options for sort announcements by city and request data
        deactivate UI

        User -> UI : select data (sortingType)
        activate UI

        UI -> CTRL : getAnnouncementsByCity(sortingType, announcementList)
        activate CTRL

        CTRL -> AnnounceList : getAnnouncementsByCity(sortingType, announcementList)
        activate AnnounceList

        alt ascending city

            AnnounceList -> AnnounceList : sortAnnouncementsByAscendingCity(announcementList)
            activate AnnounceList

            AnnounceList --> AnnounceList : announcementList
            deactivate AnnounceList

            else descending city

            AnnounceList -> AnnounceList : sortAnnouncementsByDescendingCity(announcementList)
            activate AnnounceList

            AnnounceList --> AnnounceList : announcementList
            deactivate AnnounceList

        |||
        end


       AnnounceList --> CTRL : announcementList
       deactivate AnnounceList

       CTRL --> UI : announcementList
       deactivate CTRL

       UI --> User : display all the listed properties, according to the \ncriteria chosen
        deactivate UI
    |||
    end

    opt state
        User -> UI : asks to sort announcements by state
        activate UI

        UI --> User :  shows options for sort announcements by state and request data
        deactivate UI

        User -> UI : select data (sortingType)
        activate UI

        UI -> CTRL : getAnnouncementsByState(sortingType, announcementList)
        activate CTRL

        CTRL -> AnnounceList : getAnnouncementsByState(sortingType, announcementList)
        activate AnnounceList


        alt ascending state

            AnnounceList -> AnnounceList : sortAnnouncementsByAscendingState(announcementList)
            activate AnnounceList

            AnnounceList --> AnnounceList : announcementList
            deactivate AnnounceList

            else descending state

            AnnounceList -> AnnounceList : sortAnnouncementsByDescendingState(announcementList)
            activate AnnounceList

            AnnounceList --> AnnounceList : announcementList
            deactivate AnnounceList

        |||
        end


        AnnounceList --> CTRL : announcementList
        deactivate AnnounceList

        CTRL --> UI : announcementList
        deactivate CTRL

        UI --> User : display all the listed properties, according to the \ncriteria chosen
        deactivate UI
    |||
    end


deactivate User

@enduml