@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "Agent" as ADM
participant ":ListVisitsUI" as UI
participant ":ListVisitsController" as CTRL
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
'participant "algorithmRepository:\nAlgorithmRepository" as AlgorithmRepository
'participant "algorithmMapper\n:AlgorithmMapper" as AlgMapper
'participant "algorithmDto\n:AlgorithmDto" as AlgDto
'participant "algorithmDtoList\n:List<AlgorithmDto>" as AlgDtoList
'participant "algorithm\n:Algorithm" as Alg
participant "authenticationRepository\n: AuthenticationRepository" as AuthRep
participant "userSession\n: UserSession" as SESSION
participant "email\n: Email" as Email
participant "agencyRepository\n: AgencyRepository" as AgRep
participant "agency\n: Agency" as AGENCY
participant "announcementList\n: AnnouncementList" as AnnList
participant "listAnnouncements\n: List<Announcement>" as AnnounceList
participant "announcement\n: Announcement" as Announce
'participant "request\n: Request" as REQ
'participant "property\n: Property" as PROPER
'participant "location\n: Location" as LOC
participant "listVisits\n: List<Visit>" as VisitList
participant "<b><<Interface>></b>\n:SortingAlgorithm" as SORTALG
participant "visitMapper\n: VisitMapper" as VisitMapper
participant "visit\n: Visit" as Visit
participant "listVisitsDto\n: List<VisitDto>" as VisitDtoList

activate ADM

        ADM -> UI : asks to see all the booking requests made to \nproperties manage by himself
        activate UI

            UI -> CTRL** : create

            UI --> ADM : requests data
        deactivate UI

    ADM -> UI : selects requested data (begin date, end date)
    activate UI

'        UI -> CTRL : getAlgorithms()
'        activate CTRL
'
'            CTRL -> RepositorySingleton : getInstance()
'            activate RepositorySingleton
'
'                RepositorySingleton --> CTRL: repositories
'            deactivate RepositorySingleton
'
'            CTRL -> PLAT : getAlgorithmRepository()
'            activate PLAT
'
'                PLAT --> CTRL: algorithmRepository
'            deactivate PLAT
'
'            CTRL -> AlgorithmRepository : getAlgorithmList()
'            activate AlgorithmRepository
'
'                AlgorithmRepository --> CTRL : algorithmList
'            deactivate AlgorithmRepository
'
'            CTRL -> AlgMapper: toDto(algorithmList)
'            activate AlgMapper
'
'            AlgMapper -> AlgDtoList** : create
'
'            loop for each algorithm
'
'                AlgMapper -> AlgMapper : toDto(algorithmList)
'                activate AlgMapper
'
'                AlgMapper -> Alg : getAlgorithmTypeDesignation()
'                activate Alg
'
'                Alg --> AlgMapper : algorithmTypeDesignation
'                deactivate Alg
'
'                |||
'                AlgMapper -> AlgDto** : create(algorithmTypeDesignation)
'
'
'                AlgMapper --> AlgMapper: algorithmTypeDto
'                deactivate AlgMapper
'                |||
'                AlgMapper -> AlgDtoList: add(algorithmTypeDto)
'                activate AlgDtoList
'                deactivate AlgDtoList
'                end loop
'
'            AlgMapper --> CTRL : algorithmDtoList
'            deactivate AlgMapper
'
'        CTRL --> UI : algorithmDtoList
'        deactivate CTRL

'        UI --> ADM : shows sorting algorithm options and asks to select one
'    deactivate UI
'
'    ADM -> UI : selects data (sorting algorithm)
'    activate UI

    UI -> CTRL : getVisitRequestsList(beginDate, endDate)
    activate CTRL

        CTRL -> CTRL : getAgentEmail()
        activate CTRL

        CTRL -> RepositorySingleton : getInstance()
        activate RepositorySingleton

        RepositorySingleton --> CTRL : repositories
        deactivate RepositorySingleton

         CTRL -> PLAT : getAuthenticationRepository()
         activate PLAT

         PLAT --> CTRL : authenticationRepository
         deactivate PLAT

         CTRL -> AuthRep : getCurrentSession()
         activate AuthRep

         AuthRep --> CTRL : userSession
         deactivate AuthRep

         CTRL -> SESSION : getUserId()
         activate SESSION

         SESSION --> CTRL : email
         deactivate SESSION

        CTRL -> Email : getEmail()
        activate Email

        Email --> CTRL : agentEmail
        deactivate Email

        CTRL --> CTRL : agentEmail
        deactivate CTRL
        |||

        CTRL -> CTRL: getVisitRequestsListByAgentEmail(agentEmail, beginDate, endDate)
        activate CTRL

        CTRL -> PLAT :  getAgencyRepository()
        activate PLAT

        PLAT -> CTRL : agencyRepository
        deactivate PLAT
        CTRL -> AgRep: getAgencyByEmployeeEmail(agentEmail)
        activate AgRep

         loop for each agency
             AgRep -> AGENCY : anyAgentHasEmail(agentEmail)
             activate AGENCY

                  AGENCY --> AgRep : true/false
             deactivate AGENCY
         end
         AgRep --> CTRL : agency
        deactivate AgRep

        CTRL -> AGENCY: getVisitRequestsByAgentEmail(agentEmail, beginDate, endDate)
        activate AGENCY

'        loop for each announcement
        AGENCY -> AnnList : getVisitRequestsByAgentEmail(agentEmail, beginDate, endDate)
             activate AnnList

             AnnList -> VisitList**: create()


             loop for each announcement
             AnnList -> Announce : hasAgentWithEmail(agentEmail)
             activate Announce

             Announce --> AnnList : true/false
             deactivate Announce

                 opt true
                 AnnList -> Announce : getVisitDate()
                 activate Announce

                 Announce --> AnnList : visitDate
                 deactivate Announce


                 opt visitDate >= beginDate & visitDate <= endDate
                    AnnList -> Announce : getVisitRequests(beginDate, endDate)
                    activate Announce
                    Announce --> AnnList: visitsList
                    deactivate Announce

'                    AnnList -> Announce : getLocation()
'                    activate Announce
'
'                    Announce -> REQ : getLocation()
'                    activate REQ
'
'                    REQ -> PROPER : getLocation()
'                    activate PROPER

'                    PROPER -> LOC : getLocation()
'                    activate LOC
'
'                    LOC --> PROPER : location
'                    deactivate LOC

'                    PROPER --> REQ : location
'                    deactivate PROPER
'
'                    REQ --> Announce : location
'                    deactivate REQ
'
'                    Announce --> AnnList : location
'                    deactivate Announce

                    loop for each visit
                        opt !acceptanceStatus
                           AnnList -> VisitList : add(Visit)
'                            AnnList -> VisitList : add(Visit, Location)
                            activate VisitList
                            deactivate VisitList
                        end opt
                    end loop
                end opt

                 |||
                 end opt
             end loop
'             AnnList -> AnnList : sortVisitsByAlgorithm(listVisits, sortingAlgorithm)
'             activate AnnList
'             AnnList --> AnnList: visitRequestsList
'             deactivate AnnList

             AnnList --> AGENCY : visitRequestsList
             deactivate AnnList

'        end loop

        AGENCY --> CTRL : visitRequestsList
        deactivate AGENCY

        CTRL --> CTRL: visitRequestsList
        deactivate CTRL
        |||

        CTRL -> CTRL : getSortedVisitRequestList(sortingOrder, visitRequestsList)
        activate CTRL

        CTRL -> SORTALG** : create()

        note right SORTALG
        SortingMethod implementation will
        depend on the sorting method specified
        in the configuration file.
        end note

        CTRL -> SORTALG : getSortedVisitRequestList(sortingOrder, visitRequestsList)
        activate SORTALG

        SORTALG --> CTRL : sortedVisitsList
        deactivate SORTALG

        CTRL --> CTRL : sortedVisitsList
        deactivate CTRL
        |||

        CTRL -> VisitMapper : toDto(visitRequestsList)
             activate VisitMapper

             VisitMapper -> VisitDtoList**: create()

                    loop for each Visit Request

                    VisitMapper -> VisitMapper : toDto(Visit)
                    activate VisitMapper
                         |||

                        VisitMapper -> Visit : getId()
                        activate Visit

                        Visit --> VisitMapper : id
                        deactivate Visit

                        VisitMapper -> Visit : getVisitDate()
                        activate Visit

                        Visit --> VisitMapper : visitDate
                        deactivate Visit

                        VisitMapper -> Visit : getStartHour()
                        activate Visit

                        Visit --> VisitMapper : startHour
                        deactivate Visit

                        VisitMapper -> Visit : getEndHour()
                        activate Visit

                        Visit --> VisitMapper : endHour
                        deactivate Visit

                        VisitMapper -> Visit : getAcceptanceStatus()
                        activate Visit

                        Visit --> VisitMapper : acceptanceStatus
                        deactivate Visit

                        VisitMapper -> VisitDto : create(id, visitDate, startHour, endDate, acceptanceStatus)
                        activate VisitDto
                        deactivate VisitDto

'                         ref over VisitMapper
'                              Create VisitDto
'                         end ref
                    |||
                    VisitMapper --> VisitMapper: VisitDto
                    deactivate VisitMapper
                    |||
                    VisitMapper -> VisitDtoList: add(VisitDto)
                    activate VisitDtoList
                    deactivate VisitDtoList

                    |||
                    end loop

                 VisitMapper --> CTRL : listVisitsDto
                 deactivate VisitMapper

             CTRL --> UI: listVisitsDto
             deactivate CTRL

        UI --> ADM : display all booking requests according to the \ndates chosen
    deactivate UI

deactivate ADM

@enduml