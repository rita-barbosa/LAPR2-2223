@startuml
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline

skinparam classAttributeIconSize 0

class Repositories {
    - Repositories()
    + getInstance() : repositories
    + getAuthenticationRepository()
    + getAgencyRepository()
}

class ListVisitsController {
    + ListVisitsController(agencyRepository, authenticationRepository)
    + getVisitRequestsList(beginDate, endDate, sortingAlgorithm)
    - getAgentEmail()
    - getVisitRequestsListByAgentEmail(agentEmail, beginDate, endDate)
    - getSortedVisitRequestList(listVisitsDto)
}

class AuthenticationRepository{
+getCurrentSession()
}

class AgencyRepository{
-List<Agency> agencies

+getAgencyByEmployeeEmail(agentEmail)
}

class Agency{
- Integer id
- String designation
- String emailAddress
- Integer phoneNumber

+ anyAgentHasEmail(agentEmail)
+ getVisitRequestsByAgentEmail(agentEmail, beginDate, endDate)
}

class AnnouncementList{
- List<Visit> visits

+ getVisitRequestsByAgentEmail(agentEmail, beginDate, endDate, sortingAlgorithm)
}

class Announcement{
    - List<Visit> visits
    - LocalDate acceptanceDate
    - Integer id
    - Employee agent

+ hasAgentWithEmail(agentEmail)
+ getVisitList()
+ getVisitRequests(beginDate, endDate)
}

class VisitMapper{
+toDto(Visit)
}

class Visit{
- Integer id
- Integer startHour
- Integer endHour
- LocalDate visitDate
- Boolean acceptanceStatus

+getId()
+getVisitDate()
+getStartHour()
+getEndHour()
+getAcceptanceStatus()
}

class VisitDto{
- Integer id
- Integer startHour
- Integer endHour
- LocalDate visitDate
- Boolean acceptanceStatus

+VisitDto(id, visitDate, startHour, endHour, acceptanceStatus)
+add(VisitDto)
}

interface SortAlgorithm  as "<b><<Interface>></b>\nSortingAlgorithm" {
 List<VisitDto> sort(List<?> list)
}

class SortingAlgorithm1 implements SortAlgorithm{
List<VisitDto> sortDtoList

+SortingAlgorithm1(List<VisitDto> visitDtoList)
+getSortDtoList()
+List<VisitDto> sort(List<?> list)
+sortingAlgorithm(Object[] list, int size)
-getVisitDtoArray(List<?> list)
}

class SortingAlgorithm2 implements SortAlgorithm{
List<VisitDto> sortDtoList

+SortingAlgorithm2(List<VisitDto> visitDtoList)
+getSortDtoList()
+List<VisitDto> sort(List<?> list)
-getVisitDtoArray(List<?> list)
-mergeAlgorithm(VisitDto[] visitDtos, int low, int high)
-ascendingAlgorithm(VisitDto[] visitDtos, int low, int middle, int high)
}


class ListVisitsUI {
}


Repositories -> Repositories : instance

ListVisitsUI .> ListVisitsController

ListVisitsController .> Repositories : repositories


ListVisitsController .> VisitMapper

VisitMapper ..> VisitDto
VisitDto ..> Visit
VisitMapper ..> Visit

ListVisitsController ..> AgencyRepository : agencyRepository
ListVisitsController ..> AuthenticationRepository : authenticationRepository
Repositories --> "1" AgencyRepository
Repositories --> "1" AuthenticationRepository
AgencyRepository --> "*" Agency
Agency --> "1" AnnouncementList
AnnouncementList "1" --> "*" Announcement
Announcement "1"--> "*" Visit
ListVisitsController --> "1"SortAlgorithm : makes use of
'Announcement "1" -> "1" Request : is based on
'Request "1" -> "1" Property : has information about
'Visit "1" -> "1" Property : is done to
@enduml