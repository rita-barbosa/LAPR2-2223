@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize 0

class Repositories {
    - Repositories()
    + getInstance() : repositories
'    + getAlgorithmRepository()
    + getAuthenticationRepository()
    + getAgencyRepository()
}

class ListVisitsController {
    + ListVisitsController(agencyRepository, authenticationRepository, algorithmRepository)
    + getAlgorithms()
    + getVisitRequestsList(beginDate, endDate, sortingAlgorithm)
    - getAgentEmail()
    - getVisitRequestsListVyAgentEmail(agentEmail, beginDate, endDate, sortingAlgorithm)
}

'class AlgorithmRepository{
'+ getAlgorithmList()
'}
'
'class AlgorithmMapper{
'+toDto(algorithmList)
'}
'
'class AlgorithmDto{
'-String algorithmType
'
'+AlgorithmDto(AlgorithmTypeDesignation)
'}
'
'class Algorithm{
'-String algorithmType
'
'+getAlgorithmTypeDesignation()
'}

class AuthenticationRepository{
+getCurrentSession()
}

class AgencyRepository{
-List<Agency> agencies

+getAgencyByEmployeeEmail(agentEmail)
}

class Agency{
- Integer id
- String designation
- String emailAddress
- Integer phoneNumber

+ anyAgentHasEmail(agentEmail)
+ getVisitRequestsByAgentEmail(agentEmail, beginDate, endDate, sortingAlgorithm)
}

class AnnouncementList{
- List<Visit> visits

+ getVisitRequestsByAgentEmail(agentEmail, beginDate, endDate, sortingAlgorithm)
- sortingVisitsByAlgorithm(listVisits, sortingAlgorithm)
}

class Announcement{
    - List<Visit> visits
    - LocalDate acceptanceDate
    - Integer id
    - Employee agent

+ hasAgentWithEmail(agentEmail)
+ getVisitRequests(beginDate, endDate)
+ getVisitDate()
}

class VisitMapper{
+toDto(VisitRequestsList)
}

class Visit{
- Integer id
- Integer startHour
- Integer endHour
- LocalDate visitDate
- Boolean acceptanceStatus

+getId()
+getVisitDate()
+getStartHour()
+getEndHour()
+getAcceptanceStatus()
}

class VisitDto{
- Integer id
- Integer startHour
- Integer endHour
- LocalDate visitDate
- Boolean acceptanceStatus

+VisitDto(id, visitDate, startHour, endHour, acceptanceStatus)
}

class Request{
- LocalDate requestDate
- Integer id
- Employee Employee
- Email ownerEmail
- Business business
- Property property

+getLocation()
}

class Property{
- PropertyType propertyType
- Double area
- Double distanceCityCenter
- Location location
- List<Photograph> photograph

+getLocation()
}

'class Location{
'
'+getLocation()
'}

interface SortingMethods{
+getSortedVisitRequestList(visitRequestsList)
}

class SortingMethods1 implements SortingMethods{
+getSortedVisitRequestList(visitRequestsList)
}

class SortingMethods2 implements SortingMethods{
+getSortedVisitRequestList(visitRequestsList)
}


class ListVisitsUI {
}


Repositories -> Repositories : instance

ListVisitsUI .> ListVisitsController

ListVisitsController .> Repositories : repositories

'ListVisitsController ..> AlgorithmMapper
ListVisitsController .> VisitMapper

'AlgorithmMapper ..> AlgorithmDto
'AlgorithmDto ..> Algorithm
'AlgorithmMapper ..> Algorithm
VisitMapper ..> VisitDto
VisitDto ..> Visit
VisitMapper ..> Visit

ListVisitsController ..> AgencyRepository : agencyRepository
ListVisitsController ..> AuthenticationRepository : authenticationRepository
'ListVisitsController ..> AlgorithmRepository : algorithmRepository
Repositories --> "1" AgencyRepository
'Repositories --> "1" AlgorithmRepository
Repositories --> "1" AuthenticationRepository
AgencyRepository --> "*" Agency
Agency --> "1" AnnouncementList
AnnouncementList "1" --> "*" Announcement
Announcement "1"--> "*" Visit
'AlgorithmRepository --> "*" Algorithm
ListVisitsController --> "1"SortingMethods : makes use of
Announcement "1" -> "1" Request : is based on
Request "1" -> "1" Property : has information about
'00
Visit "1" -> "1" Property : is done to
@enduml