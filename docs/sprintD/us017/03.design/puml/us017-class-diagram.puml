@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize 0

'left to right direction

title Class Diagram - US017

class Agency {
    - Integer id
    - String description
    - Email emailAddress
    - String phoneNumber
    - List<Employee> employees
    + getDealsAnnouncementList()
    + hasId()
    + getDescription()
}

class AnnouncementList{
    - List<Announcement> announcements
    + getDealsList()
    + sortAnnouncementsByMostRecentSaleDate()
    + getAnnouncement(idx)
}

note right of AnnouncementList::getAnnouncement
The variable idx refers to the
position of the announcement
in the Announcement List
end note

class AnnouncementMapper {
    + toNetworkDto(listOfAllDeals, agenciesList)
    + getAgencyDescriptionById(agencyId, agenciesList)
}

class AnnouncementDto{
    + create(announcementId, requestInfo,\n saleDate, saleAmount, requestDate,\n commissionInfo, agentName, agencyId)
}

note top of AnnouncementDto
    - requestInfo is String
     from the Announcement
     Request's toString()
    - commissionInfo is
    String from Announcement
    Commission's toString()
end note

class Announcement{
    - LocalDate acceptanceDate
    - LocalDate saleDate
    - Double saleAmount
    - Integer id
    - List<Visit> visitList
    + isDeal()
    + getSaleDate()
    + getId()
    + getRequestDate()
    + getCommissionInfo()
    + getSaleAmount()
    + getRequestInfo()
    + getAgencyId()
}

note left of Announcement::isItDeal
This method checks if the
saleAmount of the Announcement
is different from the default one
end note

class Commission{
    - Double commissionValue
    + toString()
}

class Request{
    - LocalDate requestDate
    - Integer id
    - Email ownerEmail
    + toString()
}

class AgencyRepository {
    + getAllDealsAnnouncements()
    + getAgenciesList()
}

class Repositories {
    - Repositories()
    + getInstance() : repositories
    + getAgencyRepository()
}

class ListDealsNetworkController {
    + ListDealsNetworkController(AgencyRepository)
    + getAllDealsList()
    + getListSortedByAlgorithm(sortingOrder, algorithm)
    + getSortedList(algorithm, sortingOrder, listOfAllDeals)
    + convertToDto(listOfAllDeals)
}

interface SortingAlgorithm  as "<b><<Interface>></b>\nSortingAlgorithm" {
    - sort(order, list)
}

class MergeAlgorithm {
    - sort(sortingOrder, listOfAllDeals)
}

class BubbleAlgorithm {
    - sort(sortingOrder, listOfAllDeals)
}

note top of ListDealsNetworkController
    - sortingOrder and algorithm
    are retrieved from selected
    data
    - listOfAllDeals is retrieved
    from the sorting method
end note

class ListDealsNetworkUI {
}

class Employee{
    - String agencyId
    + getAgencyId()
}


'RELATIONS

ListDealsNetworkUI .> ListDealsNetworkController

Repositories -> Repositories : instance

ListDealsNetworkController .> Repositories : repositories

Repositories -left> "1" AgencyRepository

ListDealsNetworkController ..> Agency

ListDealsNetworkController .> SortingAlgorithm

ListDealsNetworkController ..> AgencyRepository

AgencyRepository "1" --> "*" Agency : aggregates >

Agency "1" --> "1" AnnouncementList : owns >

ListDealsNetworkController ..> AnnouncementMapper

AnnouncementMapper ..> AnnouncementList

AnnouncementMapper ..> Announcement

AnnouncementMapper ..> AnnouncementDto

MergeAlgorithm ..up|> SortingAlgorithm : implements >

BubbleAlgorithm ..left|> SortingAlgorithm : implements >

Employee "1" --> "*" Announcement: is published by <
Employee "1" -> "1" Agency: works in  >
AnnouncementList "1" --> "*" Announcement: records >
Announcement "1" -> "1" Request : is  based on >
Announcement "1" -right-> "1" Commission: is assigned to <

@enduml