@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "Agent" as ADM
 participant ":AcceptOrdersUI" as UI
 participant ":AcceptOrdersController" as CTRL
 participant ":Repositories" as RepositorySingleton
 participant "repositories\n:Repositories" as PLAT
 participant "userSession\n: UserSession" as UserSession
 participant "authenticationRepository\n: Authentication Repository" as AuthRep
 participant "email\n: Email" as Email
 participant "agencyRepository\n: AgencyRepository" as AgRep
 participant "agency\n: Agency" as AGENCY
 participant "announcementList\n: AnnouncementList" as AnnList
 participant "announcementMapper\n: AnnouncementMapper" as AnnMAPPER
 participant "announcementDto\n: AnnouncementDto" as AnnDTO
 participant "announcement\n: Announcement" as Announce
 participant "orderList\n: OrderList" as OrderList
 participant "orderMapper\n: OrderMapper" as OrderMapper
 participant "orderDto\n: OrderDto" as OrderDTO
 participant "order\n: Order" as Order
 participant "notification\n: Notification" as Notification


activate ADM
    ADM -> UI : asks to accept purchase orders
    activate UI

    UI -> CTRL** : create

    UI -> CTRL : getAnnouncementList()
    activate CTRL

    CTRL -> CTRL: getAnnouncementListOfAllAgencies()
    activate CTRL

    CTRL -> RepositorySingleton : getInstance()
    activate RepositorySingleton

    RepositorySingleton --> CTRL : repositories
    deactivate RepositorySingleton

     CTRL -> PLAT : getAuthenticationRepository()
     activate PLAT

     PLAT --> CTRL : authenticationRepository
     deactivate PLAT

     CTRL -> AuthRep : getCurrentSession()
     activate AuthRep

     AuthRep --> CTRL : userSession
     deactivate AuthRep

     CTRL -> UserSession : getUserId()
     activate UserSession

     UserSession --> CTRL : email
     deactivate UserSession

    CTRL -> Email : toString()
    activate Email

    Email --> CTRL : agentEmail
    deactivate Email

     CTRL -> PLAT :  getAgencyRepository()
     activate PLAT

     PLAT -> CTRL : agencyRepository
     deactivate PLAT
     CTRL -> AgRep: getAgencyByEmployeeEmail(agentEmail)
                 activate AgRep

                     loop [for each agency
                         AgRep -> AGENCY : anyAgentHasEmail(agentEmail)
                         activate AGENCY

                              AGENCY --> AgRep : true/false
                         deactivate AGENCY
                     end
                     AgRep --> CTRL : agency
                 deactivate AgRep


     CTRL -> AGENCY: getAnnouncementByAgentEmail(agentEmail)
     activate AGENCY


     AGENCY -> AnnList : getAnnouncementsByAgentEmail(agentEmail)
     activate AnnList
     loop for each announcement
     AnnList -> Announce : hasAgentWithEmail(agentEmail)
     activate Announce

     Announce --> AnnList : true/false
     deactivate Announce

         alt true
            AnnList -> Announce : getOrderList()
            activate Announce
            Announce --> AnnList: orderList
            deactivate Announce
            AnnList -> OrderList : sortOrdersByPrice()
            activate OrderList
            deactivate OrderList

            AnnList -> AnnList : add(announcement)
            activate AnnList
            AnnList --> AnnList :
            deactivate AnnList
         |||
         end alt
     end loop
     AnnList -> AnnList : sortAnnouncementsByOldest(listAnnouncements)
     activate AnnList
     AnnList --> AnnList: listAnnouncements
     deactivate AnnList

     AnnList --> AGENCY : listAnnouncements
     deactivate AnnList

     AGENCY --> CTRL : listAnnouncements
     deactivate AGENCY

     CTRL --> CTRL: listAnnouncements
     deactivate CTRL

    CTRL -> AnnMAPPER : toDTO(announcementListAllAgencies)
         activate AnnMAPPER

             note right AnnMAPPER
             **DÚVIDAS | FALTA FAZER:**
             * Será necessário colocar os mappers do requestDto; orderList....
             end note

             loop for each announcement

             AnnMAPPER -> AnnMAPPER : toDTO(announcement)
             activate AnnMAPPER

             AnnMAPPER -> Announce: getRequestAttributes()
             activate Announce
             Announce --> AnnMAPPER : requestAttributes
             deactivate Announce

             AnnMAPPER -> Announce: getCommissionAttributes()
             activate Announce
             Announce --> AnnMAPPER : commissionAttributes
             deactivate Announce

             AnnMAPPER -> Announce : getId()
             activate Announce
             Announce --> AnnMAPPER : id
             deactivate Announce

             AnnMAPPER -> Announce: getAcceptanceDate()
             activate Announce
             Announce --> AnnMAPPER : acceptanceDate
             deactivate Announce

             AnnMAPPER -> Announce:  getListOrders()
             activate Announce
             Announce -> OrderList : getList()
             activate OrderList

             OrderList --> Announce : listOrders
             deactivate OrderList
             Announce --> AnnMAPPER : listOrders
             deactivate Announce

             AnnMAPPER -> OrderMapper : toDTO(listOrders)
             activate OrderMapper

                    loop for each order
                    OrderMapper -> OrderDTO** : create(order)
                    OrderMapper -> OrderMapper : add(orderDto)
                    activate OrderMapper
                    OrderMapper --> OrderMapper
                    deactivate OrderMapper
                    |||
                    end loop

             OrderMapper --> AnnMAPPER: listOrdersDto
             deactivate OrderMapper

             AnnMAPPER -> AnnDTO**: create(requestAttributes, listOrdersDto,\n commissionAttributes, acceptanceDate, id)
             deactivate AnnMAPPER

             AnnMAPPER -> AnnMAPPER: add(announcementDto)
             activate AnnMAPPER

             AnnMAPPER --> AnnMAPPER:
             deactivate AnnMAPPER

             |||
             end loop

         AnnMAPPER --> CTRL : listAnnouncementsDto
         deactivate AnnMAPPER


     CTRL --> UI: listAnnouncementsDto
     deactivate CTRL

    loop for each property available for purchase

    UI --> ADM : displays property by oldest and its orders by highest price\n and asks to select acceptanceAnswer for orders
    deactivate UI
        |||
        alt purchaseOrderList != empty
            |||
            loop for each displayed offer && while acceptanceAnswer != yes

            ADM -> UI  : selects acceptanceAnswer
            activate UI

            UI --> ADM : asks to confirm acceptanceAnswer and submit data
            deactivate UI

            ADM -> UI  : submits data
            activate UI

            UI -> CTRL : defineOrderAcceptance(answer,orderDto,announcementDto)
            activate CTRL

                note right CTRL
                O QUE FALTA -->  ** TENHO DÚVIDAS**:
                    * Adicionar a accpetanceAnswer às orders do anuncio
                    * Fazer o sendNotification()
                end note
            CTRL -> CTRL: getAnnouncementFromDto(announcementDto)
            activate CTRL

                CTRL -> AnnMAPPER: getAnnouncementId(announcementDto)
                activate AnnMAPPER

                AnnMAPPER -> AnnDTO: getAnnouncementId(announcementDto)
                activate AnnDTO

                AnnDTO --> AnnMAPPER: announcementId
                deactivate AnnDTO

                AnnMAPPER --> CTRL: announcementId
                deactivate AnnMAPPER

                CTRL -> AgRep: getAgencyByAnnouncementId(announcementId)
                activate AgRep

                    loop for each agency

                    AgRep -> AGENCY :  anyAnnouncementHasId(announcementId)
                    activate AGENCY
                        loop for each announcement

                        AGENCY -> AnnList:  anyAnnouncementHasId(announcementId)
                        activate AnnList
                        AnnList --> AGENCY: true/false
                        deactivate AnnList

                        end loop
                    AGENCY --> AgRep: true/false
                    deactivate AGENCY

                    end loop

                AgRep --> CTRL : agency
                deactivate AgRep

                CTRL -> AGENCY :  getAnnouncementByID(announcementId)
                activate AGENCY

                AGENCY -> AnnList : getAnnouncementByID(announcementId)
                activate AnnList

                    loop  for each announcement

                    AnnList -> Announce : hasId(announcementId)
                    activate Announce

                    Announce -->AnnList :true/false
                    deactivate Announce

                    end loop

                AnnList --> AGENCY : announcement
                deactivate AnnList

                AGENCY --> CTRL : announcement
                deactivate AGENCY

            CTRL --> CTRL : announcement
            deactivate CTRL

            |||
            CTRL-> Announce : defineOrderAcceptance(answer,order)
            activate Announce

                Announce -> OrderMapper: toModel(orderDto)
                activate OrderMapper

                OrderMapper -> OrderDTO : orderAmount = getOrderAmount()
                activate OrderDTO
                deactivate OrderDTO

                OrderMapper -> OrderDTO : orderDate = getOrderDate()
                activate OrderDTO
                deactivate OrderDTO

                OrderMapper -> OrderDTO : clientEmail = getClientEmail()
                activate OrderDTO
                deactivate OrderDTO

                OrderMapper -> Order** : create(orderAmount, orderDate, clientEmail)

                OrderMapper --> Announce : order
                deactivate OrderMapper

                Announce -> OrderList : defineOrderAcceptance(answer, order)
                activate OrderList

                OrderList -> Order : setAcceptanceAnswer(answer)
                activate Order

                                note right Order
                                    Check if **file** needs to have **specific name**
                                end note

                Order -> Notification: sendOrderAcceptanceNotification(clientEmail, answer)
                activate Notification
                Notification --> Order : success
                deactivate Notification

                deactivate Order
                    alt answer == accept

                        loop for all the other orders
                            note right OrderList
                                **NEED TO:**
                                * Check which orders don't have a acceptanceAnswer, so that I only update those
                            end note

                        OrderList -> Order : rejectOrder()
                        activate Order

                        alt acceptanceAnswer != null
                        Order -> Order : setAcceptanceAnswer(answer)
                        activate Order

                        Order -> Notification: sendOrderAcceptanceNotification(clientEmail,answer)
                        activate Notification
                        deactivate Notification

                        Order --> Order:
                        deactivate Order
                         |||
                        end alt
                        deactivate Order
                        |||
                        end loop

                    end alt
                OrderList --> Announce: success
                deactivate OrderList

            Announce --> CTRL : success
            deactivate Announce

            CTRL --> UI : success
            deactivate CTRL

            UI --> ADM : displays operation success
            deactivate UI

            end loop
        |||
        end alt
    |||
    end loop

    deactivate ADM



@enduml