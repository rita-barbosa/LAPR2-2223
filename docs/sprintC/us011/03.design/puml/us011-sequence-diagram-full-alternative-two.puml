@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "Agent" as ADM
 participant ":AcceptOrdersUI" as UI
 participant ":AcceptOrdersController" as CTRL
 participant ":Repositories" as RepositorySingleton
 participant "repositories\n:Repositories" as PLAT
 participant "agencyRepository\n: AgencyRepository" as AgRep
 participant "agency\n: Agency" as AGENCY
 participant "announcementList\n: AnnouncementList" as AnnList
 participant "announcement\n: Announcement" as Announce
 participant "orderList\n: OrderList" as OrderList
 participant "announcementMapper\n: AnnouncementMapper" as AnnMAPPER
 participant "announcementDto\n: AnnouncementDto" as AnnDTO
 participant "requestDto\n: RequestDto" as RequestDTO
 participant "orderListMapper\n: OrderListMapper" as OrderListMapper
 participant "orderListDto\n: OrderListDto" as OrderListDTO
 participant "orderMapper\n: OrderMapper" as OrderMapper
 participant "orderDto\n: OrderDto" as OrderDTO
 participant "order\n: Order" as Order
 participant "employeeDto\n: EmployeeDto" as EmployeeDTO
participant "commissionDto\n: CommissionDto" as CommissionDTO

activate ADM
    ADM -> UI : asks to accept purchase orders
    activate UI

    UI -> CTRL** : create

    UI -> CTRL : getAnnouncementList()
    activate CTRL
    CTRL -> CTRL : getAnnouncementListOfAllAgencies()
    activate CTRL

    CTRL -> RepositorySingleton : getInstance()
    activate RepositorySingleton

    RepositorySingleton --> CTRL : repositories
    deactivate RepositorySingleton

     CTRL -> PLAT :  getAgencyRepository()
     activate PLAT

     PLAT -> CTRL : agencyRepository
     deactivate PLAT

     CTRL-> AgRep : getAgenciesList()
     activate AgRep

     AgRep --> CTRL : agenciesList
     deactivate AgRep

     CTRL -> AgRep :  getAnnouncementListFromAllAgencies()
     activate AgRep

         loop for each agency
         AgRep -> AGENCY :  getAnnouncementList()
         activate AGENCY

         AGENCY -> AnnList : getList()
         activate AnnList

            loop  for each announcement

            AnnList -> OrderList : sortOrdersByPrice(announcement)
            activate OrderList

            deactivate OrderList

            end loop

         AnnList --> AGENCY: announcementList
         deactivate AnnList

         AGENCY --> AgRep: announcementList
         deactivate AGENCY

         AgRep -> AgRep: add(announcementList)
         activate AgRep

         AgRep --> AgRep:
         deactivate AgRep
         |||
         end loop

     AgRep --> CTRL: announcementListAllAgencies
     deactivate AgRep

     CTRL -> AnnList: sortAnnouncementsByOldest(announcementListAllAgencies)
     activate AnnList

     AnnList --> CTRL: announcementListAllAgencies
     deactivate AnnList

     CTRL --> CTRL : announcementListAllAgencies
     deactivate CTRL

     CTRL -> AnnMAPPER : toDTO(announcementListAllAgencies)
     activate AnnMAPPER

         note right AnnMAPPER
         **DÚVIDAS | FALTA FAZER:**
         * Será necessário colocar os mappers do requestDto; orderList....
         * Verificar se é necessário colocar a seta a tracejado de 'volta' (-->)
         end note

         loop for each announcement

         AnnMAPPER -> AnnMAPPER : toDTO(announcement)
         activate AnnMAPPER

         AnnMAPPER -> AnnDTO**: create(announcement)
         deactivate AnnMAPPER
         activate AnnDTO

         AnnDTO -> RequestDTO** : createRequestDTO()

         AnnDTO -> OrderListDTO** : createOrderListDTO()
         activate OrderListDTO

             loop for each order

             OrderListDTO -> OrderDTO** : createOrderDto()

             OrderListDTO -> OrderListDTO : add(orderDto)
             activate OrderListDTO

             OrderListDTO --> OrderListDTO
             deactivate OrderListDTO
             |||
             end loop

         deactivate OrderListDTO

         AnnDTO -> EmployeeDTO** : createEmployeeDTO()

         AnnDTO -> CommissionDTO** : createCommissionDTO()
         deactivate AnnDTO

         AnnMAPPER -> AnnMAPPER: add(announcementDto)
         activate AnnMAPPER

         AnnMAPPER --> AnnMAPPER:
         deactivate AnnMAPPER

         |||
         end loop

     AnnMAPPER --> CTRL : announcementDtoList
     deactivate AnnMAPPER

     CTRL --> UI: announcementDtoList
     deactivate CTRL

    loop for each property available for purchase

        note right UI
            **QUESTION : Será mesmo necessário fazer isto tendo**
             **em conta que já temos announcementDto?**
        end note

    UI -> CTRL: getPurchaseOrderList(announcementDto)
    activate CTRL

    CTRL -> AnnDTO : getPurchaseOrderList()
    activate AnnDTO

    AnnDTO -> OrderListMapper : getPurchaseOrderList()
    activate OrderListMapper

    OrderListMapper -> OrderListDTO : getList()
    activate OrderListDTO

    OrderListDTO --> OrderListMapper : orderDtoList
    deactivate OrderListDTO

    OrderListMapper --> AnnDTO : orderDtoList
    deactivate OrderListMapper

    AnnDTO --> CTRL : orderDtoList
    deactivate AnnDTO

    CTRL --> UI: orderDtoList
    deactivate CTRL

    UI --> ADM : displays property by oldest and its orders by highest price\n and asks to select acceptanceAnswer for orders
    deactivate UI

        alt purchaseOrderList != empty
            |||
            loop for each displayed offer && while acceptanceAnswer != yes

            ADM -> UI  : selects acceptanceAnswer
            activate UI

            UI --> ADM : asks to confirm acceptanceAnswer and submit data
            deactivate UI

            ADM -> UI  : submits data
            activate UI

            UI -> CTRL : defineOrderAcceptance(answer,orderDto,announcementDto)
            activate CTRL

                note right CTRL
                O QUE FALTA -->  ** TENHO DÚVIDAS**:
                    * Adicionar a accpetanceAnswer às orders do anuncio
                    * Fazer o sendNotification()
                end note
            CTRL -> CTRL: getAnnouncementFromDto(announcementDto)
            activate CTRL

            CTRL -> AnnMAPPER: getAnnouncementId(announcementDto)
            activate AnnMAPPER

            AnnMAPPER -> AnnDTO: getAnnouncementId(announcementDto)
            activate AnnDTO

            AnnDTO --> AnnMAPPER: announcementId
            deactivate AnnDTO

            AnnMAPPER --> CTRL: announcementId
            deactivate AnnMAPPER

            CTRL -> AgRep: getAgencyByAnnouncementId(announcementId)
            activate AgRep

                loop for each agency

                AgRep -> AGENCY :  anyAnnouncementHasId(announcementId)
                activate AGENCY

                AGENCY --> AgRep: true/false
                deactivate AGENCY

                end loop

            AgRep --> CTRL : agency
            deactivate AgRep

            CTRL -> AGENCY :  getAnnouncementByID(announcementId)
            activate AGENCY

            AGENCY -> AnnList : getAnnouncementByID(announcementId)
            activate AnnList

            AnnList --> AGENCY : announcement
            deactivate AnnList

            AGENCY --> CTRL : announcement
            deactivate AGENCY

            CTRL --> CTRL : announcement
            deactivate CTRL

            |||
            CTRL-> Announce : defineOrderAcceptance(answer,order)
            activate Announce

            Announce -> OrderMapper: toModel(orderDto)
            activate OrderMapper

            OrderMapper -> OrderDTO : orderAmount = getOrderAmount()
            activate OrderDTO
            deactivate OrderDTO

            OrderMapper -> OrderDTO : orderDate = getOrderDate()
            activate OrderDTO
            deactivate OrderDTO

            OrderMapper -> OrderDTO : clientEmail = getClientEmail()
            activate OrderDTO
            deactivate OrderDTO

            OrderMapper -> Order** : create(orderAmount, orderDate, clientEmail)

            OrderMapper --> Announce : order
            deactivate OrderMapper

            Announce -> OrderList : defineOrderAcceptance(answer, order)
            activate OrderList

            OrderList -> Order : setAcceptanceAnswer(answer)
                        activate Order

                            note right Order
                                Check if **file** needs to have **specific name**
                            end note

            Order -> Notification: sendOrderAcceptanceNotification(clientEmail, answer)
            activate Notification
            Notification --> Order : success
            deactivate Notification

            deactivate Order
                alt answer == accept

                    loop for all of the other orders
                        note right OrderList
                            **NEED TO:**
                            * Check which orders don't have a acceptanceAnswer, so that I only update those
                        end note

                    OrderList -> Order : rejectOrder()
                    activate Order

                    alt acceptanceAnswer != null
                    Order -> Order : setAcceptanceAnswer(answer)
                    activate Order

                    Order -> Notification: sendOrderAcceptanceNotification(clientEmail,answer)
                    activate Notification
                    deactivate Notification

                    Order --> Order:
                    deactivate Order
                     |||
                    end alt
                    deactivate Order
                    |||
                    end loop

                end alt
            OrderList --> Announce: success
            deactivate OrderList
            Announce --> CTRL : success
            deactivate Announce

            CTRL --> UI : success
            deactivate CTRL

            UI --> ADM : displays operation success
            deactivate UI

            end loop
        |||
        end alt
    |||
    end loop

    deactivate ADM



@enduml