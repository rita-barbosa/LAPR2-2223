@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize 0

'left to right direction

class AuthenticationRepository
{
    + getUserEmail()
}

class AuthFacade
{
    + getUserEmail()
}

class UserSession
{
    + getUserId()
}

class Visit {
    - Integer id
    - String userName
    - String userPhoneNumber
    - Integer startHour
    - Integer endHour
    - LocalDate visitDate
    - Boolean acceptanceStatus
    + Visit(visitDate, startHour, endHour,\n userName, userPhoneNumber)
    + getVisitDate()
    + getStartHour()
    + getEndHour()
    + sendNotification(agentEmail)
}

class AgencyRepository {
    + getAgencies()
    + searchAnnouncementById(announcementId)
}

class Agency {
    - Integer id
    - String designation
    - String emailAddress
    - Integer phoneNumber
    + getAnnouncementList()
    + searchAnnouncementById(announcementId)
}

class Repositories {
    - Repositories()
    + getInstance() : Repositories
    + getPersonRepository()
    + getAgencyRepository()
}

class ScheduleVisitController {
    + ScheduleVisitController(agencyRepository, personRepository)
    + getAnnouncementListDto()
    + convertToModel(announcementDto)
    + scheduleVisitFromAnnouncement(announcement, visitDate, startHour, endHour)
    + scheduleVisit(visitDate, startHour, endHour)
    + getAgencies()
    + toDto(listToDisplay)
    + getUserPerson()
    + sendNotificationMessage(agentEmail)
}

note top of ScheduleVisitController
    - announcementDto is retrieved
     from selected data
    - announcement is retrieved from
    convertion of announcementDto
    to Model
    - visit is retrieved from announcement
    - visitDate, startHour, endHour
    are retrieved from Visit
    - listToDisplay is the list of properties
     to display
     - agentEmail is retrieved from
     the announcement that has the
     visit instance.
end note

class ScheduleVisitUI {
}

class Announcement {
    - List<Visit> visits
    - LocalDate acceptanceDate
    - Integer id
    - Employee agent
    + getAnnouncementId()
    + getLocation()
    + hasSameId(announcementId)
    + getAnnouncementInfoToDisplay()
    + createVisit(visitDate, startHour,\n endHour, userName, userPhoneNumber)
    + addVisit(visit)
    - validateVisit(visit)
    + getAgentEmail()

}

class AnnouncementMapper {
    + toDTO(listToDisplay)
    + getAnnouncementIdFromDto(announcementDto
}

class AnnouncementList {
    - List<Announcement> announcements
    + AnnouncementList()
    + getList()
    + getAnnouncement(idx)
    + addListContent(announcementList)
    + addAll(announcementList)
    + searchAnnouncementById(announcementId)
    + sortListByFilter(filter)
}

note left of AnnouncementList::sortListByFilter
This method compares "filter" (a string)
 to a list of criteria available and redirects
 the output to its respective sorting method.
end note


class AnnouncementDto{
    + create(announcementId, requestInfo)
}

note bottom of AnnouncementDto
    - requestInfo is String
     from Request's toString()
end note

class AnnouncementListDto{
    + getAnnouncementId()
    + add(announcementDto)
}

class Request{
    - LocalDate requestDate
    - Integer id
    - Employee Employee
    - Email ownerEmail
    - Business business
    - Property property
    + getLocation()
    + toString()
}

'class Business{
'    - Double amount
'    - BusinessType businessType
'    + toString()
'}

class Property {
    - PropertyType propertyType
    - Double area
    - Double distanceCityCenter
    - Location location
    - List<Photograph> photograph
    + getLocation()
    + toString()
    }

class Employee{
    - String agencyId
    + getEmailAddress()
}

class Person{
    - String name;
    - String taxNumber;
    - Email emailAddress;
    - String phoneNumber;
    - String passportCardNumber;
    - List<String> roles;
    - Location location;
    + getName()
    + getPhoneNumber()
    + getEmailAddress()
    + hasEmail(userEmail)
}

class PersonRepository {
    + doesAnyPersonHaveEmail(userEmail)
}

note left of PersonRepository
    - userEmail is retrieved
    from user session
end note

Interface Notification << Interface >> {
    + sendNotification(email)
}

'RELATIONS

ScheduleVisitUI ..> ScheduleVisitController

Repositories -> Repositories : instance

AuthenticationRepository -> AuthenticationRepository : instance

AuthenticationRepository --> "1" AuthFacade

AuthFacade -right-> "1" UserSession

ScheduleVisitController ..> AuthenticationRepository

ScheduleVisitController ..> Repositories

Repositories "1" --> "1" PersonRepository

Repositories "1" --> "1" AgencyRepository

Repositories "1" --> "1" AuthenticationRepository

ScheduleVisitController ..> PersonRepository

ScheduleVisitController ..> AgencyRepository

ScheduleVisitController ..> Agency

AgencyRepository "1" --> "*" Agency : aggregates

PersonRepository "1" --> "*" Person : aggregates

ScheduleVisitController ..> Person

ScheduleVisitController ..> Visit

ScheduleVisitController .> Announcement

ScheduleVisitController ..> AnnouncementMapper

AnnouncementMapper ..> Announcement

AnnouncementMapper ..> AnnouncementDto

AnnouncementMapper .right.> AnnouncementListDto

ScheduleVisitController .> AnnouncementListDto

ScheduleVisitController .> AnnouncementDto

ScheduleVisitUI .> AnnouncementListDto

ScheduleVisitUI .> AnnouncementDto

AnnouncementListDto -> AnnouncementDto : contains >

Person "1" -up-> "1" Employee: represented in <
Employee "1" --> "*" Announcement: is published by <
Employee "1" -> "*" Visit: schedules >
Person "1" --> "*" Visit:  requests >
Visit "1" -right-> "1" Property: done to >
Announcement "1" -down-> "*" Visit : records >
Employee "1" -> "1" Agency: works in  >
Agency "1" --> "1" AnnouncementList : owns >
AnnouncementList "1" --> "*" Announcement: records >
Property "1" -left-> "1" Request : < has information about
'Request "1" -left "1" Business: is described by >
Announcement "1" -left-> "1" Request : is  based on >
Agency "1" --> "*" Request : is assigned to >
Visit .up|> Notification : implements >

@enduml