@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

title Sequence Diagram (SD) - US009

autonumber

actor "<b> Customer </b>" as CTM
participant "<b> :ScheduleVisitUI </b>" as UI
participant "<b> :ScheduleVisitController </b>" as CTRL
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
participant "agencyRepository\n:AgencyRepository" as AgencyRepository
participant "agency\n:Agency" as AGC
participant ":AnnouncementMapper" as MAPPER
participant "announcementList\n:AnnouncementList" as LISTCLASS
participant "announcement\n:Announcement" as ANNOUNCE
participant "request\n:Request" as REQUEST
participant "property\n:Property" as PROPERTY
participant "announcementListDto\n:List<AnnouncementDto>" as LISTDTO
participant "announcementDto\n:AnnouncementDto" as ANCDTO
participant "visit\n:Visit" as VST
participant "employee\n:Employee" as EMP
participant ":ApplicationSession" as _APP
participant "applicationSession\n:ApplicationSession" as APP
participant "userSession\n:UserSession" as SESSION
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
participant "personRepository\n:PersonRepository" as PersonRepository
participant "person:\nPerson" as PERSON


activate CTM

    CTM -> UI : asks to schedule a new visit
        activate UI

    UI -> CTRL** : create

    UI -> CTRL : getAnnouncementListDto()
        activate CTRL

    CTRL -> LISTCLASS** : listToDisplay = createList()

    CTRL -> RepositorySingleton : getAgencies()

    activate RepositorySingleton

                RepositorySingleton --> CTRL : repositories
            deactivate RepositorySingleton

            CTRL -> PLAT : getAgencyRepository()

            activate PLAT

                PLAT -> CTRL : agencyRepository

            deactivate PLAT

            CTRL -> AgencyRepository : getAgencies()

            activate AgencyRepository

            AgencyRepository --> CTRL : agenciesList

            deactivate AgencyRepository
    |||

                loop for all agencies

                    CTRL -> AGC : getAnnouncementList()
                    activate AGC

                    AGC -> LISTCLASS : getList()
                    activate LISTCLASS

                        LISTCLASS --> AGC : announcementList
                    deactivate LISTCLASS

                        AGC --> CTRL : announcementList
                    deactivate AGC

                    CTRL -> LISTCLASS : addListContent(announcementList)
                    activate LISTCLASS

                    LISTCLASS -> LISTCLASS : addAll(announcementList)
                    activate LISTCLASS

                    LISTCLASS --> LISTCLASS
                    deactivate LISTCLASS

                    LISTCLASS --> CTRL : listToDisplay
                    deactivate LISTCLASS

                end loop

                CTRL -> LISTCLASS : sortListByAcceptanceDate(listToDisplay)
                activate LISTCLASS

                    LISTCLASS --> CTRL : listToDisplay
                deactivate LISTCLASS

|||
            CTRL -> MAPPER : toDTO(listToDisplay)
                    activate MAPPER

                    MAPPER -> LISTDTO** : listToDisplayDto = create()

                    loop for all announcements

                    MAPPER -> LISTCLASS : announcement = getAnnouncement(idx)
                    activate LISTCLASS

                        LISTCLASS --> MAPPER : announcement
                    deactivate LISTCLASS

                    MAPPER -> ANNOUNCE : announcementId = getAnnouncementId()
                    activate ANNOUNCE

                    ANNOUNCE --> MAPPER : announcementId
                    deactivate ANNOUNCE
            |||
                    MAPPER -> ANNOUNCE : requestInfo = getAnnouncementInfoToDisplay()
                    activate ANNOUNCE

                        ANNOUNCE -> REQUEST : toString()
                        activate REQUEST

                            REQUEST --> ANNOUNCE : requestInfo
                        deactivate REQUEST

                        ANNOUNCE --> MAPPER : requestInfo
                    deactivate ANNOUNCE
            |||

                    MAPPER --> ANCDTO**: create(announcementId, requestInfo)

                    MAPPER -> LISTDTO : add(announcementDto)
                    activate LISTDTO
                    deactivate LISTDTO

                    end loop

                    MAPPER -> CTRL : listToDisplayDto
                    deactivate MAPPER

                    CTRL --> UI : listToDisplayDto

    deactivate CTRL

        UI --> CTM : shows announcements list
    deactivate UI

    alt Selection of Filters

        loop for each filter
            CTM -> UI : selects filter
            activate UI

            UI -> CTRL : filter

            activate CTRL

                CTRL -> LISTCLASS : listToDisplay = sortListByFilter(filter)
                activate LISTCLASS

                    LISTCLASS --> CTRL : listToDisplay
                deactivate LISTCLASS

                |||

        CTRL -> MAPPER : toDTO(listToDisplay)
        activate MAPPER

        MAPPER -> LISTDTO** : listToDisplayDto = create()

        loop for all announcements

        MAPPER -> LISTCLASS : announcement = getAnnouncement(idx)
        activate LISTCLASS

            LISTCLASS --> MAPPER : announcement
        deactivate LISTCLASS

        MAPPER -> ANNOUNCE : announcementId = getAnnouncementId()
        activate ANNOUNCE

        ANNOUNCE --> MAPPER : announcementId
        deactivate ANNOUNCE
|||
        MAPPER -> ANNOUNCE : requestInfo = getAnnouncementInfoToDisplay()
        activate ANNOUNCE

            ANNOUNCE -> REQUEST : toString()
            activate REQUEST

                REQUEST --> ANNOUNCE : requestInfo
            deactivate REQUEST

            ANNOUNCE --> MAPPER : requestInfo
        deactivate ANNOUNCE
|||

        MAPPER --> ANCDTO**: create(announcementId, requestInfo)

        MAPPER -> LISTDTO : add(announcementDto)
        activate LISTDTO
        deactivate LISTDTO

        end loop

        MAPPER -> CTRL : listToDisplayDto
        deactivate MAPPER

                        CTRL --> UI : listToDisplayDto
                    deactivate CTRL

                        UI --> CTM : shows announcements list
                    deactivate UI

            deactivate CTRL



            deactivate UI



        end loop
    end alt

    CTM -> UI : selects an announcement
        activate UI

    UI -> CTRL : convertToModel(announcementDto)
    activate CTRL

        CTRL -> MAPPER : announcementId = getAnnouncementIdFromDto(announcementDto)
        activate MAPPER

        MAPPER -> ANCDTO : getAnnouncementId()
        activate ANCDTO

            ANCDTO --> MAPPER : announcementId
        deactivate ANCDTO

            MAPPER --> CTRL : announcementId
        deactivate MAPPER

        CTRL -> AgencyRepository : searchAnnouncementById(announcementId)
        activate AgencyRepository

        loop for all agencies

            AgencyRepository -> AGC : searchAnnouncementById(announcementId)
            activate AGC

                AGC -> LISTCLASS : searchAnnouncementById(announcementId)

                loop for all announcements

                    activate LISTCLASS

                    LISTCLASS --> ANNOUNCE : hasSameId(announcementId)

                    activate ANNOUNCE

                        ANNOUNCE --> LISTCLASS : true/false
                    deactivate ANNOUNCE

                end loop

        end loop

            LISTCLASS --> AGC : announcement
        deactivate LISTCLASS

            AGC --> AgencyRepository : announcement
        deactivate AGC

            AgencyRepository --> CTRL : announcement
        deactivate AgencyRepository

    CTRL --> UI : announcement
    deactivate CTRL


    UI --> CTM : requests data
        deactivate UI

    loop At least once
    CTM -> UI : types requested data (visitDate, startHour, endHour)
        activate UI

        UI -> CTRL : scheduleVisitFromAnnouncement(announcement,\n visitDate, startHour, endHour)

        activate CTRL

    CTRL -> ANNOUNCE : createVisit(visitDate, startHour, endHour)
    activate ANNOUNCE

    ANNOUNCE -> VST** : create(visitDate, startHour, endHour)

     ANNOUNCE -> ANNOUNCE : addVisit(visit)
     activate ANNOUNCE

     ANNOUNCE -> ANNOUNCE : validateVisit(visit)
     activate ANNOUNCE

        ANNOUNCE --> ANNOUNCE
     deactivate ANNOUNCE

     ANNOUNCE --> ANNOUNCE
     deactivate ANNOUNCE

        ANNOUNCE --> CTRL : visit
    deactivate ANNOUNCE
|||

        CTRL -> ANNOUNCE : announcementId = getAnnouncementId()
        activate ANNOUNCE

            ANNOUNCE ->  CTRL : announcementId
        deactivate ANNOUNCE

        CTRL -> ANNOUNCE : location = getLocation()
        activate ANNOUNCE

            ANNOUNCE ->  REQUEST : getLocation()
            activate REQUEST

                REQUEST -> PROPERTY : getLocation()
                activate PROPERTY

                    PROPERTY --> REQUEST : location
                deactivate PROPERTY

                REQUEST --> ANNOUNCE : location
            deactivate REQUEST

             ANNOUNCE --> CTRL : location
        deactivate ANNOUNCE

        CTRL -> ANNOUNCE : visitDate = getVisitDate()
        activate ANNOUNCE

            ANNOUNCE ->  VST : getVisitDate()
            activate VST

                VST --> ANNOUNCE : visitDate
            deactivate VST
             ANNOUNCE --> CTRL : visitDate
        deactivate ANNOUNCE

        CTRL -> ANNOUNCE : startHour = getVisitStartHour()
        activate ANNOUNCE

            ANNOUNCE ->  VST : getStartHour()
            activate VST

                VST --> ANNOUNCE : startHour
            deactivate VST
             ANNOUNCE --> CTRL : startHour
        deactivate ANNOUNCE

        CTRL -> ANNOUNCE : endHour = getVisitEndHour()
        activate ANNOUNCE

            ANNOUNCE ->  VST : getEndHour()
            activate VST

                VST --> ANNOUNCE : endHour
            deactivate VST
             ANNOUNCE --> CTRL : endHour
        deactivate ANNOUNCE

        |||
        CTRL -> ANNOUNCE: agentEmail = getAgentEmail()
        activate ANNOUNCE

        ANNOUNCE -> EMP : getEmail()
        activate EMP

        EMP -> PERSON : getEmailAddress()
        activate PERSON

           PERSON --> EMP : agentEmail
        deactivate PERSON

           EMP --> ANNOUNCE : agentEmail
        deactivate EMP

           ANNOUNCE --> CTRL : agentEmail
        deactivate ANNOUNCE

         CTRL -> _APP: getInstance()
         activate _APP

            _APP -> CTRL: authFacade
         deactivate _APP

         CTRL -> APP: getCurrentSession()
         activate APP

             APP --> CTRL: userSession
         deactivate APP

         CTRL -> SESSION: userEmail = getUserId()
         activate SESSION

             SESSION --> CTRL: userEmail
         deactivate SESSION
|||
        CTRL -> RepositorySingleton : getInstance()
        activate RepositorySingleton

            RepositorySingleton --> CTRL : repositories
        deactivate RepositorySingleton

        CTRL -> PLAT : getPersonRepository()
        activate PLAT

            PLAT -> CTRL : PersonRepository
        deactivate PLAT

        CTRL -> PersonRepository : doesAnyPersonHaveEmail(userEmail)
        activate PersonRepository

        loop for each person

            PersonRepository -> PERSON : doesPersonHaveEmail(userEmail)
            activate PERSON

                PERSON --> PersonRepository : true/false
            deactivate PERSON

        end loop

            PersonRepository --> CTRL : person
        deactivate PersonRepository
|||
        CTRL -> PERSON : getName()
        activate PERSON

            PERSON --> CTRL : name
        deactivate PERSON


        CTRL -> PERSON : getPhoneNumber()
        activate PERSON

            PERSON --> CTRL : phoneNumber
        deactivate PERSON

    |||
        CTRL -> ANNOUNCE : sendNotification(agentEmail, announcementId, location,\n name, phoneNumber, visitDate, startHour, endHour)
        activate ANNOUNCE

        ANNOUNCE -> VST : sendNotification(agentEmail, announcementId, location,\n name, phoneNumber, visitDate, startHour, endHour)

        activate VST

        VST -> VST : createNotification(agentEmail, announcementId, location, \nname, phoneNumber, visitDate, startHour, endHour)

        activate VST

        VST -> VST : sendNotification(email, attributeList)
        activate VST

            VST --> VST
        deactivate VST

            VST --> VST : confirmation
        deactivate VST

            VST --> ANNOUNCE : confirmation
        deactivate VST

            ANNOUNCE --> CTRL : confirmation
        deactivate ANNOUNCE
    |||
    end loop

    CTRL --> UI : confirmation
    deactivate CTRL

    UI --> CTM : displays operation success
        deactivate UI

@enduml